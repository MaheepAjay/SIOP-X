"""init

Revision ID: b797ba7021c3
Revises: 
Create Date: 2025-04-12 15:48:24.024142

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b797ba7021c3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('calendar', 'fiscal_period',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_column('calendar', 'is_holiday')
    op.alter_column('companies', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('customers', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('customers', 'channel',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('customers', 'region',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('demand_plan', 'created_by',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'AI Agent'::text"))
    op.drop_constraint('demand_plan_location_id_fkey', 'demand_plan', type_='foreignkey')
    op.drop_constraint('demand_plan_product_id_fkey', 'demand_plan', type_='foreignkey')
    op.alter_column('demand_plans', 'method',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('demand_plans', 'version',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'v1'::text"))
    op.alter_column('document_rules', 'parameters',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index('idx_document_id', table_name='document_rules')
    op.alter_column('documents', 'content',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('documents', 'extracted',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('forecasting_policies', 'domain',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('forecasting_policies', 'rule_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('forecasting_policies', 'frequency',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('forecasting_policies', 'method',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('forecasting_policies', 'conditions',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('forecasting_policies', 'logic',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('forecasting_policies', 'segment',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_constraint('forecasting_policies_document_id_fkey', 'forecasting_policies', type_='foreignkey')
    op.alter_column('forecasts', 'sku',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('forecasts', 'forecast_qty',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('forecasts', 'method',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_constraint('forecasts_product_id_fkey', 'forecasts', type_='foreignkey')
    op.drop_constraint('forecasts_policy_id_fkey', 'forecasts', type_='foreignkey')
    op.drop_constraint('forecasts_company_id_fkey', 'forecasts', type_='foreignkey')
    op.drop_constraint('inventory_product_id_fkey', 'inventory', type_='foreignkey')
    op.drop_constraint('inventory_location_id_fkey', 'inventory', type_='foreignkey')
    op.alter_column('locations', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('locations', 'type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('locations', 'region',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('plan_exceptions', 'exception_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('plan_exceptions', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('plan_exceptions', 'severity',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_constraint('plan_exceptions_location_id_fkey', 'plan_exceptions', type_='foreignkey')
    op.drop_constraint('plan_exceptions_product_id_fkey', 'plan_exceptions', type_='foreignkey')
    op.alter_column('product_location', 'replenishment_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_constraint('product_location_location_id_fkey', 'product_location', type_='foreignkey')
    op.drop_constraint('product_location_product_id_fkey', 'product_location', type_='foreignkey')
    op.alter_column('production_orders', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_constraint('production_orders_product_id_fkey', 'production_orders', type_='foreignkey')
    op.drop_constraint('production_orders_location_id_fkey', 'production_orders', type_='foreignkey')
    op.alter_column('products', 'sku',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('products', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('products', 'category',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('products', 'uom',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'EA'::text"))
    op.drop_constraint('products_sku_key', 'products', type_='unique')
    op.alter_column('profiles', 'username',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('profiles', 'avatar_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_constraint('profiles_id_fkey', 'profiles', type_='foreignkey')
    op.alter_column('purchase_orders', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_constraint('purchase_orders_product_id_fkey', 'purchase_orders', type_='foreignkey')
    op.drop_constraint('purchase_orders_location_id_fkey', 'purchase_orders', type_='foreignkey')
    op.drop_constraint('purchase_orders_supplier_id_fkey', 'purchase_orders', type_='foreignkey')
    op.alter_column('sales_orders', 'uom',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_constraint('sales_orders_product_id_fkey', 'sales_orders', type_='foreignkey')
    op.alter_column('suppliers', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('suppliers', 'contact_email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('suppliers', 'country',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('supply_plan', 'supply_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('supply_plan', 'created_by',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'AI Agent'::text"))
    op.drop_constraint('supply_plan_location_id_fkey', 'supply_plan', type_='foreignkey')
    op.drop_constraint('supply_plan_product_id_fkey', 'supply_plan', type_='foreignkey')
    op.alter_column('table_dictionary', 'table_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('table_dictionary', 'column_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('table_dictionary', 'business_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('table_dictionary', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('table_dictionary', 'example',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('table_dictionary', 'data_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.alter_column('table_dictionary', 'data_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('table_dictionary', 'example',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('table_dictionary', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('table_dictionary', 'business_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('table_dictionary', 'column_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('table_dictionary', 'table_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_foreign_key('supply_plan_product_id_fkey', 'supply_plan', 'products', ['product_id'], ['product_id'])
    op.create_foreign_key('supply_plan_location_id_fkey', 'supply_plan', 'locations', ['location_id'], ['location_id'])
    op.alter_column('supply_plan', 'created_by',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'AI Agent'::text"))
    op.alter_column('supply_plan', 'supply_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('suppliers', 'country',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('suppliers', 'contact_email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('suppliers', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_foreign_key('sales_orders_product_id_fkey', 'sales_orders', 'products', ['product_id'], ['product_id'])
    op.alter_column('sales_orders', 'uom',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.create_foreign_key('purchase_orders_supplier_id_fkey', 'purchase_orders', 'suppliers', ['supplier_id'], ['supplier_id'])
    op.create_foreign_key('purchase_orders_location_id_fkey', 'purchase_orders', 'locations', ['location_id'], ['location_id'])
    op.create_foreign_key('purchase_orders_product_id_fkey', 'purchase_orders', 'products', ['product_id'], ['product_id'])
    op.alter_column('purchase_orders', 'status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.create_foreign_key('profiles_id_fkey', 'profiles', 'users', ['id'], ['id'], referent_schema='auth', ondelete='CASCADE')
    op.alter_column('profiles', 'avatar_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('profiles', 'username',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.create_unique_constraint('products_sku_key', 'products', ['sku'])
    op.alter_column('products', 'uom',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'EA'::text"))
    op.alter_column('products', 'category',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('products', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('products', 'sku',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_foreign_key('production_orders_location_id_fkey', 'production_orders', 'locations', ['location_id'], ['location_id'])
    op.create_foreign_key('production_orders_product_id_fkey', 'production_orders', 'products', ['product_id'], ['product_id'])
    op.alter_column('production_orders', 'status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.create_foreign_key('product_location_product_id_fkey', 'product_location', 'products', ['product_id'], ['product_id'])
    op.create_foreign_key('product_location_location_id_fkey', 'product_location', 'locations', ['location_id'], ['location_id'])
    op.alter_column('product_location', 'replenishment_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.create_foreign_key('plan_exceptions_product_id_fkey', 'plan_exceptions', 'products', ['product_id'], ['product_id'])
    op.create_foreign_key('plan_exceptions_location_id_fkey', 'plan_exceptions', 'locations', ['location_id'], ['location_id'])
    op.alter_column('plan_exceptions', 'severity',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('plan_exceptions', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('plan_exceptions', 'exception_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('locations', 'region',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('locations', 'type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('locations', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_foreign_key('inventory_location_id_fkey', 'inventory', 'locations', ['location_id'], ['location_id'])
    op.create_foreign_key('inventory_product_id_fkey', 'inventory', 'products', ['product_id'], ['product_id'])
    op.create_foreign_key('forecasts_company_id_fkey', 'forecasts', 'companies', ['company_id'], ['id'])
    op.create_foreign_key('forecasts_policy_id_fkey', 'forecasts', 'forecasting_policies', ['policy_id'], ['id'])
    op.create_foreign_key('forecasts_product_id_fkey', 'forecasts', 'products', ['product_id'], ['product_id'])
    op.alter_column('forecasts', 'method',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('forecasts', 'forecast_qty',
               existing_type=sa.String(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.alter_column('forecasts', 'sku',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.create_foreign_key('forecasting_policies_document_id_fkey', 'forecasting_policies', 'documents', ['document_id'], ['id'])
    op.alter_column('forecasting_policies', 'segment',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('forecasting_policies', 'logic',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('forecasting_policies', 'conditions',
               existing_type=sa.String(),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('forecasting_policies', 'method',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('forecasting_policies', 'frequency',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('forecasting_policies', 'rule_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('forecasting_policies', 'domain',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('documents', 'extracted',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('documents', 'content',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_index('idx_document_id', 'document_rules', ['document_id'], unique=False)
    op.alter_column('document_rules', 'parameters',
               existing_type=sa.String(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('demand_plans', 'version',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'v1'::text"))
    op.alter_column('demand_plans', 'method',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.create_foreign_key('demand_plan_product_id_fkey', 'demand_plan', 'products', ['product_id'], ['product_id'])
    op.create_foreign_key('demand_plan_location_id_fkey', 'demand_plan', 'locations', ['location_id'], ['location_id'])
    op.alter_column('demand_plan', 'created_by',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'AI Agent'::text"))
    op.alter_column('customers', 'region',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('customers', 'channel',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('customers', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('companies', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('calendar', sa.Column('is_holiday', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.alter_column('calendar', 'fiscal_period',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    # ### end Alembic commands ###
